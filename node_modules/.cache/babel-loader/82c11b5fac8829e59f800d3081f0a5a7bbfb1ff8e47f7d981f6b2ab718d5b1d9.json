{"ast":null,"code":"import _regeneratorRuntime from\"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/createClass.js\";import axios from'axios';// Search options interface corresponds to the request schema for the /search endpoint without the query, which is the first parameter in  search()\n// The Result interface represents a search result object from the API.\n// The SearchResponse interface represents the response from the /search endpoint.\n// It includes an array of result objects.\n// FindSimilarOptions interface corresponds to the request schema for the /findSimilar endpoint without the url, which is the first parameter in findSimilar()\n// The DocumentContent interface represents the content of a document from the /contents endpoint.\n// The GetContentsResponse interface represents the response from the /contents endpoint.\n// It includes an array of document content objects.\n// The Metaphor class encapsulates the API's endpoints.\nvar Metaphor=/*#__PURE__*/function(){function Metaphor(apiKey){var baseURL=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'https://api.metaphor.systems';_classCallCheck(this,Metaphor);this.client=void 0;this.client=axios.create({baseURL:baseURL,headers:{'x-api-key':apiKey}});}_createClass(Metaphor,[{key:\"search\",value:function(){var _search=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(query,options){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return this.client.post('/search',_objectSpread({query:query},options));case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}},_callee,this);}));function search(_x,_x2){return _search.apply(this,arguments);}return search;}()},{key:\"findSimilar\",value:function(){var _findSimilar=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url,options){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.client.post('/findSimilar',_objectSpread({url:url},options));case 2:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 4:case\"end\":return _context2.stop();}},_callee2,this);}));function findSimilar(_x3,_x4){return _findSimilar.apply(this,arguments);}return findSimilar;}()},{key:\"getContents\",value:function(){var _getContents=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ids){var requestIds,response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:// Check if the first element is a string or not. If it's a string, it's an ID array.\nif(typeof ids[0]==='string'){requestIds=ids;}else{// If it's not a string, then it's a Result array.\nrequestIds=ids.map(function(result){return result.id;});}_context3.next=3;return this.client.get('/contents',{params:{ids:requestIds}});case 3:response=_context3.sent;return _context3.abrupt(\"return\",response.data);case 5:case\"end\":return _context3.stop();}},_callee3,this);}));function getContents(_x5){return _getContents.apply(this,arguments);}return getContents;}()}]);return Metaphor;}();export{Metaphor as default};","map":{"version":3,"names":["axios","Metaphor","apiKey","baseURL","arguments","length","undefined","_classCallCheck","client","create","headers","_createClass","key","value","_search","_asyncToGenerator","_regeneratorRuntime","mark","_callee","query","options","response","wrap","_callee$","_context","prev","next","post","_objectSpread","sent","abrupt","data","stop","search","_x","_x2","apply","_findSimilar","_callee2","url","_callee2$","_context2","findSimilar","_x3","_x4","_getContents","_callee3","ids","requestIds","_callee3$","_context3","map","result","id","get","params","getContents","_x5","default"],"sources":["/Users/Pallavi/metaphor/news-summarizer/src/metaphor/metaphor-api.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\n\r\n// Search options interface corresponds to the request schema for the /search endpoint without the query, which is the first parameter in  search()\r\nexport interface SearchOptions {\r\n  numResults?: number; // Number of search results to return. Maximum 100. Default 10\r\n  includeDomains?: string[]; // Include results only from these domains. Example: [\"example.com\", \"sample.net\"]\r\n  excludeDomains?: string[]; // Exclude results from these domains. Example: [\"excludedomain.comcludeme.net\"]\r\n  startCrawlDate?: string; // Include results only that were crawled after this date. Must be in ISO 8601 format. Example: \"2023-01-01\"\r\n  endCrawlDate?: string; // Include results only that were crawled before this date. Must be in ISO 8601 format. Example: \"2023-12-31\"\r\n  startPublishedDate?: string; // Include only links with a published date after this. Must be in ISO 8601 format. Example: \"2023-01-01\"\r\n  endPublishedDate?: string; // Include only links with a published date before this. Must be in ISO 8601 format. Example: \"2023-12-31\"\r\n  useAutoprompt?: boolean; // Uses Metaphor-optimized query.\r\n  type?: string; // Search can be 'keyword' or 'neural'. Default is 'neural'\r\n}\r\n\r\n// The Result interface represents a search result object from the API.\r\nexport interface Result {\r\n  title: string;\r\n  url: string;\r\n  publishedDate?: string;\r\n  author?: string;\r\n  score: number;\r\n  id: string;\r\n}\r\n\r\n// The SearchResponse interface represents the response from the /search endpoint.\r\n// It includes an array of result objects.\r\nexport interface SearchResponse {\r\n  results: Result[];\r\n  autopromptString?: string; // The autoprompt string for the query, if useAutoprompt was on.\r\n}\r\n\r\n// FindSimilarOptions interface corresponds to the request schema for the /findSimilar endpoint without the url, which is the first parameter in findSimilar()\r\nexport interface FindSimilarOptions {\r\n  numResults?: number; // Number of search results to return. Maximum 100. Default 10\r\n  includeDomains?: string[]; // Include results only from these domains. Example: [\"example.com\", \"sample.net\"]\r\n  excludeDomains?: string[]; // Exclude results from these domains. Example: [\"excludedomain.com\", \"excludeme.net\"]\r\n  startCrawlDate?: string; // The optional start date (inclusive) for the crawled data. Must be specified in ISO 8601 format. Example: \"2023-01-01\"\r\n  endCrawlDate?: string; // The optional end date (inclusive) for the crawled data. Must be specified in ISO 8601 format. Example: \"2023-12-31\"\r\n  startPublishedDate?: string; // The optional start date (inclusive) for the published data. Must be specified in ISO 8601 format. Example: \"2023-01-01\"\r\n  endPublishedDate?: string; // The optional end date (inclusive) for the published data. Must be specified in ISO 8601 format. Example: \"2023-12-31\"\r\n}\r\n\r\n// The DocumentContent interface represents the content of a document from the /contents endpoint.\r\nexport interface DocumentContent {\r\n  id: string // The ID of the document.\r\n  url: string; // The URL of the document.\r\n  title: string; // The title of the document.\r\n  extract: string; // The first 1000 tokens of content in the document.\r\n}\r\n\r\n// The GetContentsResponse interface represents the response from the /contents endpoint.\r\n// It includes an array of document content objects.\r\nexport interface GetContentsResponse {\r\n  contents: DocumentContent[];\r\n}\r\n\r\n// The Metaphor class encapsulates the API's endpoints.\r\nexport default class Metaphor {\r\n  private client: AxiosInstance;\r\n\r\n  constructor(apiKey: string, baseURL: string = 'https://api.metaphor.systems') {\r\n    this.client = axios.create({ baseURL,\r\n      headers: {\r\n        'x-api-key': apiKey\r\n      }\r\n    });\r\n  }\r\n\r\n  async search(query: string, options?: SearchOptions): Promise<SearchResponse> {\r\n    const response = await this.client.post<SearchResponse>('/search', {query, ...options});\r\n    return response.data;\r\n  }\r\n\r\n  async findSimilar(url: string, options?: FindSimilarOptions): Promise<SearchResponse> {\r\n    const response = await this.client.post<SearchResponse>('/findSimilar', {url, ...options});\r\n    return response.data;\r\n  }\r\n\r\n  async getContents(ids: string[] | Result[]): Promise<GetContentsResponse> {\r\n    let requestIds: string[];\r\n\r\n    // Check if the first element is a string or not. If it's a string, it's an ID array.\r\n    if (typeof ids[0] === 'string') {\r\n      requestIds = ids as string[];\r\n    } else {\r\n      // If it's not a string, then it's a Result array.\r\n      requestIds = (ids as Result[]).map(result => result.id);\r\n    }\r\n\r\n    const response = await this.client.get<GetContentsResponse>('/contents', { params: { ids: requestIds } });\r\n    return response.data;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}