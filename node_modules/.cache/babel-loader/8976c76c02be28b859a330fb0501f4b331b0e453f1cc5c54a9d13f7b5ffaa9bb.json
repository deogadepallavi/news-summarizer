{"ast":null,"code":"import _classCallCheck from \"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Pallavi/metaphor/news-summarizer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint, { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n  CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n  CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n  CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nvar TO_LOWER_BIT = 32;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n  return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\nfunction isAsciiAlphaNumeric(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n  EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n  EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n  EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n  /** Entities in text nodes that can end with any character. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Only allow entities terminated with a semicolon. */\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n  /** Entities in attributes have limitations on ending characters. */\n  DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport var EntityDecoder = /*#__PURE__*/function () {\n  function EntityDecoder( /** The tree used to decode entities. */\n  decodeTree,\n  /**\n   * The function that is called when a codepoint is decoded.\n   *\n   * For multi-byte named entities, this will be called multiple times,\n   * with the second codepoint, and the same `consumed` value.\n   *\n   * @param codepoint The decoded codepoint.\n   * @param consumed The number of bytes consumed by the decoder.\n   */\n  emitCodePoint, /** An object that is used to produce errors. */\n  errors) {\n    _classCallCheck(this, EntityDecoder);\n    this.decodeTree = decodeTree;\n    this.emitCodePoint = emitCodePoint;\n    this.errors = errors;\n    /** The current state of the decoder. */\n    this.state = EntityDecoderState.EntityStart;\n    /** Characters that were consumed while parsing an entity. */\n    this.consumed = 1;\n    /**\n     * The result of the entity.\n     *\n     * Either the result index of a numeric entity, or the codepoint of a\n     * numeric entity.\n     */\n    this.result = 0;\n    /** The current index in the decode tree. */\n    this.treeIndex = 0;\n    /** The number of characters that were consumed in excess. */\n    this.excess = 1;\n    /** The mode in which the decoder is operating. */\n    this.decodeMode = DecodingMode.Strict;\n  }\n  /** Resets the instance to make it reusable. */\n  _createClass(EntityDecoder, [{\n    key: \"startEntity\",\n    value: function startEntity(decodeMode) {\n      this.decodeMode = decodeMode;\n      this.state = EntityDecoderState.EntityStart;\n      this.result = 0;\n      this.treeIndex = 0;\n      this.excess = 1;\n      this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n  }, {\n    key: \"write\",\n    value: function write(str, offset) {\n      switch (this.state) {\n        case EntityDecoderState.EntityStart:\n          {\n            if (str.charCodeAt(offset) === CharCodes.NUM) {\n              this.state = EntityDecoderState.NumericStart;\n              this.consumed += 1;\n              return this.stateNumericStart(str, offset + 1);\n            }\n            this.state = EntityDecoderState.NamedEntity;\n            return this.stateNamedEntity(str, offset);\n          }\n        case EntityDecoderState.NumericStart:\n          {\n            return this.stateNumericStart(str, offset);\n          }\n        case EntityDecoderState.NumericDecimal:\n          {\n            return this.stateNumericDecimal(str, offset);\n          }\n        case EntityDecoderState.NumericHex:\n          {\n            return this.stateNumericHex(str, offset);\n          }\n        case EntityDecoderState.NamedEntity:\n          {\n            return this.stateNamedEntity(str, offset);\n          }\n      }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n  }, {\n    key: \"stateNumericStart\",\n    value: function stateNumericStart(str, offset) {\n      if (offset >= str.length) {\n        return -1;\n      }\n      if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n        this.state = EntityDecoderState.NumericHex;\n        this.consumed += 1;\n        return this.stateNumericHex(str, offset + 1);\n      }\n      this.state = EntityDecoderState.NumericDecimal;\n      return this.stateNumericDecimal(str, offset);\n    }\n  }, {\n    key: \"addToNumericResult\",\n    value: function addToNumericResult(str, start, end, base) {\n      if (start !== end) {\n        var digitCount = end - start;\n        this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n        this.consumed += digitCount;\n      }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n  }, {\n    key: \"stateNumericHex\",\n    value: function stateNumericHex(str, offset) {\n      var startIdx = offset;\n      while (offset < str.length) {\n        var char = str.charCodeAt(offset);\n        if (isNumber(char) || isHexadecimalCharacter(char)) {\n          offset += 1;\n        } else {\n          this.addToNumericResult(str, startIdx, offset, 16);\n          return this.emitNumericEntity(char, 3);\n        }\n      }\n      this.addToNumericResult(str, startIdx, offset, 16);\n      return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n  }, {\n    key: \"stateNumericDecimal\",\n    value: function stateNumericDecimal(str, offset) {\n      var startIdx = offset;\n      while (offset < str.length) {\n        var char = str.charCodeAt(offset);\n        if (isNumber(char)) {\n          offset += 1;\n        } else {\n          this.addToNumericResult(str, startIdx, offset, 10);\n          return this.emitNumericEntity(char, 2);\n        }\n      }\n      this.addToNumericResult(str, startIdx, offset, 10);\n      return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n  }, {\n    key: \"emitNumericEntity\",\n    value: function emitNumericEntity(lastCp, expectedLength) {\n      var _a;\n      // Ensure we consumed at least one digit.\n      if (this.consumed <= expectedLength) {\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n        return 0;\n      }\n      // Figure out if this is a legit end of the entity\n      if (lastCp === CharCodes.SEMI) {\n        this.consumed += 1;\n      } else if (this.decodeMode === DecodingMode.Strict) {\n        return 0;\n      }\n      this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n      if (this.errors) {\n        if (lastCp !== CharCodes.SEMI) {\n          this.errors.missingSemicolonAfterCharacterReference();\n        }\n        this.errors.validateNumericCharacterReference(this.result);\n      }\n      return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n  }, {\n    key: \"stateNamedEntity\",\n    value: function stateNamedEntity(str, offset) {\n      var decodeTree = this.decodeTree;\n      var current = decodeTree[this.treeIndex];\n      // The mask is the number of bytes of the value, including the current byte.\n      var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n      for (; offset < str.length; offset++, this.excess++) {\n        var char = str.charCodeAt(offset);\n        this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n        if (this.treeIndex < 0) {\n          return this.result === 0 ||\n          // If we are parsing an attribute\n          this.decodeMode === DecodingMode.Attribute && (\n          // We shouldn't have consumed any characters after the entity,\n          valueLength === 0 ||\n          // And there should be no invalid characters.\n          isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n        }\n        current = decodeTree[this.treeIndex];\n        valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        // If the branch is a value, store it and continue\n        if (valueLength !== 0) {\n          // If the entity is terminated by a semicolon, we are done.\n          if (char === CharCodes.SEMI) {\n            return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n          }\n          // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n          if (this.decodeMode !== DecodingMode.Strict) {\n            this.result = this.treeIndex;\n            this.consumed += this.excess;\n            this.excess = 0;\n          }\n        }\n      }\n      return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n  }, {\n    key: \"emitNotTerminatedNamedEntity\",\n    value: function emitNotTerminatedNamedEntity() {\n      var _a;\n      var result = this.result,\n        decodeTree = this.decodeTree;\n      var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n      this.emitNamedEntityData(result, valueLength, this.consumed);\n      (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n      return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n  }, {\n    key: \"emitNamedEntityData\",\n    value: function emitNamedEntityData(result, valueLength, consumed) {\n      var decodeTree = this.decodeTree;\n      this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n      if (valueLength === 3) {\n        // For multi-byte values, we need to emit the second byte.\n        this.emitCodePoint(decodeTree[result + 2], consumed);\n      }\n      return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n  }, {\n    key: \"end\",\n    value: function end() {\n      var _a;\n      switch (this.state) {\n        case EntityDecoderState.NamedEntity:\n          {\n            // Emit a named entity if we have one.\n            return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n          }\n        // Otherwise, emit a numeric entity if we have one.\n        case EntityDecoderState.NumericDecimal:\n          {\n            return this.emitNumericEntity(0, 2);\n          }\n        case EntityDecoderState.NumericHex:\n          {\n            return this.emitNumericEntity(0, 3);\n          }\n        case EntityDecoderState.NumericStart:\n          {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n          }\n        case EntityDecoderState.EntityStart:\n          {\n            // Return 0 if we have no entity.\n            return 0;\n          }\n      }\n    }\n  }]);\n  return EntityDecoder;\n}();\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n  var ret = \"\";\n  var decoder = new EntityDecoder(decodeTree, function (str) {\n    return ret += fromCodePoint(str);\n  });\n  return function decodeWithTrie(str, decodeMode) {\n    var lastIndex = 0;\n    var offset = 0;\n    while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n      ret += str.slice(lastIndex, offset);\n      decoder.startEntity(decodeMode);\n      var len = decoder.write(str,\n      // Skip the \"&\"\n      offset + 1);\n      if (len < 0) {\n        lastIndex = offset + decoder.end();\n        break;\n      }\n      lastIndex = offset + len;\n      // If `len` is 0, skip the current `&` and continue.\n      offset = len === 0 ? lastIndex + 1 : lastIndex;\n    }\n    var result = ret + str.slice(lastIndex);\n    // Make sure we don't keep a reference to the final string.\n    ret = \"\";\n    return result;\n  };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n  // Case 1: Single branch encoded in jump offset\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  }\n  // Case 2: Multiple branches encoded in jump table\n  if (jumpOffset) {\n    var value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  }\n  // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\nvar htmlDecoder = getDecoder(htmlDecodeTree);\nvar xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DecodingMode.Legacy;\n  return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(str) {\n  return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n  return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n  return xmlDecoder(str, DecodingMode.Strict);\n}","map":{"version":3,"names":["htmlDecodeTree","xmlDecodeTree","decodeCodePoint","replaceCodePoint","fromCodePoint","CharCodes","TO_LOWER_BIT","BinTrieFlags","isNumber","code","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isAsciiAlphaNumeric","UPPER_Z","LOWER_Z","isEntityInAttributeInvalidEnd","EQUALS","EntityDecoderState","DecodingMode","EntityDecoder","decodeTree","emitCodePoint","errors","_classCallCheck","state","EntityStart","consumed","result","treeIndex","excess","decodeMode","Strict","_createClass","key","value","startEntity","write","str","offset","charCodeAt","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","length","LOWER_X","addToNumericResult","start","end","base","digitCount","Math","pow","parseInt","substr","startIdx","char","emitNumericEntity","lastCp","expectedLength","_a","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","determineBranch","max","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","ret","decoder","decodeWithTrie","lastIndex","indexOf","slice","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","htmlDecoder","xmlDecoder","decodeHTML","mode","arguments","undefined","Legacy","decodeHTMLAttribute","decodeHTMLStrict","decodeXML"],"sources":["https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode.ts"],"sourcesContent":[null],"mappings":";;AAAA,OAAOA,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,eAAe,IAClBC,gBAAgB,EAChBC,aAAa,QACV,uBAAuB;AAE9B;AACA,SAASJ,cAAc,EAAEC,aAAa,EAAEC,eAAe;AACvD,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,uBAAuB;AAEvE,IAAWC,SAaV;AAbD,WAAWA,SAAS;EAChBA,SAAA,CAAAA,SAAA,qBAAQ;EACRA,SAAA,CAAAA,SAAA,uBAAS;EACTA,SAAA,CAAAA,SAAA,2BAAW;EACXA,SAAA,CAAAA,SAAA,uBAAS;EACTA,SAAA,CAAAA,SAAA,uBAAS;EACTA,SAAA,CAAAA,SAAA,6BAAY;EACZA,SAAA,CAAAA,SAAA,8BAAa;EACbA,SAAA,CAAAA,SAAA,8BAAa;EACbA,SAAA,CAAAA,SAAA,8BAAa;EACbA,SAAA,CAAAA,SAAA,6BAAY;EACZA,SAAA,CAAAA,SAAA,6BAAY;EACZA,SAAA,CAAAA,SAAA,6BAAY;AAChB,CAAC,EAbUA,SAAS,KAATA,SAAS;AAepB;AACA,IAAMC,YAAY,GAAG,EAAQ;AAE7B,WAAYC,YAIX;AAJD,WAAYA,YAAY;EACpBA,YAAA,CAAAA,YAAA,0CAAoC;EACpCA,YAAA,CAAAA,YAAA,4CAAqC;EACrCA,YAAA,CAAAA,YAAA,oCAAkC;AACtC,CAAC,EAJWA,YAAY,KAAZA,YAAY;AAMxB,SAASC,QAAQA,CAACC,IAAY;EAC1B,OAAOA,IAAI,IAAIJ,SAAS,CAACK,IAAI,IAAID,IAAI,IAAIJ,SAAS,CAACM,IAAI;AAC3D;AAEA,SAASC,sBAAsBA,CAACH,IAAY;EACxC,OACKA,IAAI,IAAIJ,SAAS,CAACQ,OAAO,IAAIJ,IAAI,IAAIJ,SAAS,CAACS,OAAO,IACtDL,IAAI,IAAIJ,SAAS,CAACU,OAAO,IAAIN,IAAI,IAAIJ,SAAS,CAACW,OAAQ;AAEhE;AAEA,SAASC,mBAAmBA,CAACR,IAAY;EACrC,OACKA,IAAI,IAAIJ,SAAS,CAACQ,OAAO,IAAIJ,IAAI,IAAIJ,SAAS,CAACa,OAAO,IACtDT,IAAI,IAAIJ,SAAS,CAACU,OAAO,IAAIN,IAAI,IAAIJ,SAAS,CAACc,OAAQ,IACxDX,QAAQ,CAACC,IAAI,CAAC;AAEtB;AAEA;;;;;;AAMA,SAASW,6BAA6BA,CAACX,IAAY;EAC/C,OAAOA,IAAI,KAAKJ,SAAS,CAACgB,MAAM,IAAIJ,mBAAmB,CAACR,IAAI,CAAC;AACjE;AAEA,IAAWa,kBAMV;AAND,WAAWA,kBAAkB;EACzBA,kBAAA,CAAAA,kBAAA,oCAAW;EACXA,kBAAA,CAAAA,kBAAA,sCAAY;EACZA,kBAAA,CAAAA,kBAAA,0CAAc;EACdA,kBAAA,CAAAA,kBAAA,kCAAU;EACVA,kBAAA,CAAAA,kBAAA,oCAAW;AACf,CAAC,EANUA,kBAAkB,KAAlBA,kBAAkB;AAQ7B,WAAYC,YAOX;AAPD,WAAYA,YAAY;EACpB;EACAA,YAAA,CAAAA,YAAA,0BAAU;EACV;EACAA,YAAA,CAAAA,YAAA,0BAAU;EACV;EACAA,YAAA,CAAAA,YAAA,gCAAa;AACjB,CAAC,EAPWA,YAAY,KAAZA,YAAY;AAoBxB;;;AAGA,WAAaC,aAAa;EACtB,SAAAA,cAAA,CACI;EACiBC,UAAuB;EACxC;;;;;;;;;EASiBC,aAAqD,EACtE;EACiBC,MAA4B;IAAAC,eAAA,OAAAJ,aAAA;IAZ5B,KAAAC,UAAU,GAAVA,UAAU;IAUV,KAAAC,aAAa,GAAbA,aAAa;IAEb,KAAAC,MAAM,GAANA,MAAM;IAG3B;IACQ,KAAAE,KAAK,GAAGP,kBAAkB,CAACQ,WAAW;IAC9C;IACQ,KAAAC,QAAQ,GAAG,CAAC;IACpB;;;;;;IAMQ,KAAAC,MAAM,GAAG,CAAC;IAElB;IACQ,KAAAC,SAAS,GAAG,CAAC;IACrB;IACQ,KAAAC,MAAM,GAAG,CAAC;IAClB;IACQ,KAAAC,UAAU,GAAGZ,YAAY,CAACa,MAAM;EAnBrC;EAqBH;EAAAC,YAAA,CAAAb,aAAA;IAAAc,GAAA;IAAAC,KAAA,EACA,SAAAC,YAAYL,UAAwB;MAChC,IAAI,CAACA,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACN,KAAK,GAAGP,kBAAkB,CAACQ,WAAW;MAC3C,IAAI,CAACE,MAAM,GAAG,CAAC;MACf,IAAI,CAACC,SAAS,GAAG,CAAC;MAClB,IAAI,CAACC,MAAM,GAAG,CAAC;MACf,IAAI,CAACH,QAAQ,GAAG,CAAC;IACrB;IAEA;;;;;;;;;;;EAAA;IAAAO,GAAA;IAAAC,KAAA,EAWA,SAAAE,MAAMC,GAAW,EAAEC,MAAc;MAC7B,QAAQ,IAAI,CAACd,KAAK;QACd,KAAKP,kBAAkB,CAACQ,WAAW;UAAE;YACjC,IAAIY,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC,KAAKtC,SAAS,CAACwC,GAAG,EAAE;cAC1C,IAAI,CAAChB,KAAK,GAAGP,kBAAkB,CAACwB,YAAY;cAC5C,IAAI,CAACf,QAAQ,IAAI,CAAC;cAClB,OAAO,IAAI,CAACgB,iBAAiB,CAACL,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC;;YAElD,IAAI,CAACd,KAAK,GAAGP,kBAAkB,CAAC0B,WAAW;YAC3C,OAAO,IAAI,CAACC,gBAAgB,CAACP,GAAG,EAAEC,MAAM,CAAC;;QAG7C,KAAKrB,kBAAkB,CAACwB,YAAY;UAAE;YAClC,OAAO,IAAI,CAACC,iBAAiB,CAACL,GAAG,EAAEC,MAAM,CAAC;;QAG9C,KAAKrB,kBAAkB,CAAC4B,cAAc;UAAE;YACpC,OAAO,IAAI,CAACC,mBAAmB,CAACT,GAAG,EAAEC,MAAM,CAAC;;QAGhD,KAAKrB,kBAAkB,CAAC8B,UAAU;UAAE;YAChC,OAAO,IAAI,CAACC,eAAe,CAACX,GAAG,EAAEC,MAAM,CAAC;;QAG5C,KAAKrB,kBAAkB,CAAC0B,WAAW;UAAE;YACjC,OAAO,IAAI,CAACC,gBAAgB,CAACP,GAAG,EAAEC,MAAM,CAAC;;;IAGrD;IAEA;;;;;;;;;EAAA;IAAAL,GAAA;IAAAC,KAAA,EASQ,SAAAQ,kBAAkBL,GAAW,EAAEC,MAAc;MACjD,IAAIA,MAAM,IAAID,GAAG,CAACY,MAAM,EAAE;QACtB,OAAO,CAAC,CAAC;;MAGb,IAAI,CAACZ,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC,GAAGrC,YAAY,MAAMD,SAAS,CAACkD,OAAO,EAAE;QAC/D,IAAI,CAAC1B,KAAK,GAAGP,kBAAkB,CAAC8B,UAAU;QAC1C,IAAI,CAACrB,QAAQ,IAAI,CAAC;QAClB,OAAO,IAAI,CAACsB,eAAe,CAACX,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC;;MAGhD,IAAI,CAACd,KAAK,GAAGP,kBAAkB,CAAC4B,cAAc;MAC9C,OAAO,IAAI,CAACC,mBAAmB,CAACT,GAAG,EAAEC,MAAM,CAAC;IAChD;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAEO,SAAAiB,mBACJd,GAAW,EACXe,KAAa,EACbC,GAAW,EACXC,IAAY;MAEZ,IAAIF,KAAK,KAAKC,GAAG,EAAE;QACf,IAAME,UAAU,GAAGF,GAAG,GAAGD,KAAK;QAC9B,IAAI,CAACzB,MAAM,GACP,IAAI,CAACA,MAAM,GAAG6B,IAAI,CAACC,GAAG,CAACH,IAAI,EAAEC,UAAU,CAAC,GACxCG,QAAQ,CAACrB,GAAG,CAACsB,MAAM,CAACP,KAAK,EAAEG,UAAU,CAAC,EAAED,IAAI,CAAC;QACjD,IAAI,CAAC5B,QAAQ,IAAI6B,UAAU;;IAEnC;IAEA;;;;;;;;;EAAA;IAAAtB,GAAA;IAAAC,KAAA,EASQ,SAAAc,gBAAgBX,GAAW,EAAEC,MAAc;MAC/C,IAAMsB,QAAQ,GAAGtB,MAAM;MAEvB,OAAOA,MAAM,GAAGD,GAAG,CAACY,MAAM,EAAE;QACxB,IAAMY,IAAI,GAAGxB,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;QACnC,IAAInC,QAAQ,CAAC0D,IAAI,CAAC,IAAItD,sBAAsB,CAACsD,IAAI,CAAC,EAAE;UAChDvB,MAAM,IAAI,CAAC;SACd,MAAM;UACH,IAAI,CAACa,kBAAkB,CAACd,GAAG,EAAEuB,QAAQ,EAAEtB,MAAM,EAAE,EAAE,CAAC;UAClD,OAAO,IAAI,CAACwB,iBAAiB,CAACD,IAAI,EAAE,CAAC,CAAC;;;MAI9C,IAAI,CAACV,kBAAkB,CAACd,GAAG,EAAEuB,QAAQ,EAAEtB,MAAM,EAAE,EAAE,CAAC;MAElD,OAAO,CAAC,CAAC;IACb;IAEA;;;;;;;;;EAAA;IAAAL,GAAA;IAAAC,KAAA,EASQ,SAAAY,oBAAoBT,GAAW,EAAEC,MAAc;MACnD,IAAMsB,QAAQ,GAAGtB,MAAM;MAEvB,OAAOA,MAAM,GAAGD,GAAG,CAACY,MAAM,EAAE;QACxB,IAAMY,IAAI,GAAGxB,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;QACnC,IAAInC,QAAQ,CAAC0D,IAAI,CAAC,EAAE;UAChBvB,MAAM,IAAI,CAAC;SACd,MAAM;UACH,IAAI,CAACa,kBAAkB,CAACd,GAAG,EAAEuB,QAAQ,EAAEtB,MAAM,EAAE,EAAE,CAAC;UAClD,OAAO,IAAI,CAACwB,iBAAiB,CAACD,IAAI,EAAE,CAAC,CAAC;;;MAI9C,IAAI,CAACV,kBAAkB,CAACd,GAAG,EAAEuB,QAAQ,EAAEtB,MAAM,EAAE,EAAE,CAAC;MAElD,OAAO,CAAC,CAAC;IACb;IAEA;;;;;;;;;;;;;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAaQ,SAAA4B,kBAAkBC,MAAc,EAAEC,cAAsB;;MAC5D;MACA,IAAI,IAAI,CAACtC,QAAQ,IAAIsC,cAAc,EAAE;QACjC,CAAAC,EAAA,OAAI,CAAC3C,MAAM,cAAA2C,EAAA,uBAAAA,EAAA,CAAEC,0CAA0C,CACnD,IAAI,CAACxC,QAAQ,CAChB;QACD,OAAO,CAAC;;MAGZ;MACA,IAAIqC,MAAM,KAAK/D,SAAS,CAACmE,IAAI,EAAE;QAC3B,IAAI,CAACzC,QAAQ,IAAI,CAAC;OACrB,MAAM,IAAI,IAAI,CAACI,UAAU,KAAKZ,YAAY,CAACa,MAAM,EAAE;QAChD,OAAO,CAAC;;MAGZ,IAAI,CAACV,aAAa,CAACvB,gBAAgB,CAAC,IAAI,CAAC6B,MAAM,CAAC,EAAE,IAAI,CAACD,QAAQ,CAAC;MAEhE,IAAI,IAAI,CAACJ,MAAM,EAAE;QACb,IAAIyC,MAAM,KAAK/D,SAAS,CAACmE,IAAI,EAAE;UAC3B,IAAI,CAAC7C,MAAM,CAAC8C,uCAAuC,EAAE;;QAGzD,IAAI,CAAC9C,MAAM,CAAC+C,iCAAiC,CAAC,IAAI,CAAC1C,MAAM,CAAC;;MAG9D,OAAO,IAAI,CAACD,QAAQ;IACxB;IAEA;;;;;;;;;EAAA;IAAAO,GAAA;IAAAC,KAAA,EASQ,SAAAU,iBAAiBP,GAAW,EAAEC,MAAc;MAChD,IAAQlB,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAClB,IAAIkD,OAAO,GAAGlD,UAAU,CAAC,IAAI,CAACQ,SAAS,CAAC;MACxC;MACA,IAAI2C,WAAW,GAAG,CAACD,OAAO,GAAGpE,YAAY,CAACsE,YAAY,KAAK,EAAE;MAE7D,OAAOlC,MAAM,GAAGD,GAAG,CAACY,MAAM,EAAEX,MAAM,EAAE,EAAE,IAAI,CAACT,MAAM,EAAE,EAAE;QACjD,IAAMgC,IAAI,GAAGxB,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;QAEnC,IAAI,CAACV,SAAS,GAAG6C,eAAe,CAC5BrD,UAAU,EACVkD,OAAO,EACP,IAAI,CAAC1C,SAAS,GAAG4B,IAAI,CAACkB,GAAG,CAAC,CAAC,EAAEH,WAAW,CAAC,EACzCV,IAAI,CACP;QAED,IAAI,IAAI,CAACjC,SAAS,GAAG,CAAC,EAAE;UACpB,OAAO,IAAI,CAACD,MAAM,KAAK,CAAC;UACpB;UACC,IAAI,CAACG,UAAU,KAAKZ,YAAY,CAACyD,SAAS;UACvC;UACCJ,WAAW,KAAK,CAAC;UACd;UACAxD,6BAA6B,CAAC8C,IAAI,CAAC,CAAE,GAC3C,CAAC,GACD,IAAI,CAACe,4BAA4B,EAAE;;QAG7CN,OAAO,GAAGlD,UAAU,CAAC,IAAI,CAACQ,SAAS,CAAC;QACpC2C,WAAW,GAAG,CAACD,OAAO,GAAGpE,YAAY,CAACsE,YAAY,KAAK,EAAE;QAEzD;QACA,IAAID,WAAW,KAAK,CAAC,EAAE;UACnB;UACA,IAAIV,IAAI,KAAK7D,SAAS,CAACmE,IAAI,EAAE;YACzB,OAAO,IAAI,CAACU,mBAAmB,CAC3B,IAAI,CAACjD,SAAS,EACd2C,WAAW,EACX,IAAI,CAAC7C,QAAQ,GAAG,IAAI,CAACG,MAAM,CAC9B;;UAGL;UACA,IAAI,IAAI,CAACC,UAAU,KAAKZ,YAAY,CAACa,MAAM,EAAE;YACzC,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACC,SAAS;YAC5B,IAAI,CAACF,QAAQ,IAAI,IAAI,CAACG,MAAM;YAC5B,IAAI,CAACA,MAAM,GAAG,CAAC;;;;MAK3B,OAAO,CAAC,CAAC;IACb;IAEA;;;;;EAAA;IAAAI,GAAA;IAAAC,KAAA,EAKQ,SAAA0C,6BAAA,EAA4B;;MAChC,IAAQjD,MAAM,GAAiB,IAAI,CAA3BA,MAAM;QAAEP,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAE1B,IAAMmD,WAAW,GACb,CAACnD,UAAU,CAACO,MAAM,CAAC,GAAGzB,YAAY,CAACsE,YAAY,KAAK,EAAE;MAE1D,IAAI,CAACK,mBAAmB,CAAClD,MAAM,EAAE4C,WAAW,EAAE,IAAI,CAAC7C,QAAQ,CAAC;MAC5D,CAAAuC,EAAA,OAAI,CAAC3C,MAAM,cAAA2C,EAAA,uBAAAA,EAAA,CAAEG,uCAAuC,EAAE;MAEtD,OAAO,IAAI,CAAC1C,QAAQ;IACxB;IAEA;;;;;;;;;EAAA;IAAAO,GAAA;IAAAC,KAAA,EASQ,SAAA2C,oBACJlD,MAAc,EACd4C,WAAmB,EACnB7C,QAAgB;MAEhB,IAAQN,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAElB,IAAI,CAACC,aAAa,CACdkD,WAAW,KAAK,CAAC,GACXnD,UAAU,CAACO,MAAM,CAAC,GAAG,CAACzB,YAAY,CAACsE,YAAY,GAC/CpD,UAAU,CAACO,MAAM,GAAG,CAAC,CAAC,EAC5BD,QAAQ,CACX;MACD,IAAI6C,WAAW,KAAK,CAAC,EAAE;QACnB;QACA,IAAI,CAAClD,aAAa,CAACD,UAAU,CAACO,MAAM,GAAG,CAAC,CAAC,EAAED,QAAQ,CAAC;;MAGxD,OAAOA,QAAQ;IACnB;IAEA;;;;;;;EAAA;IAAAO,GAAA;IAAAC,KAAA,EAOA,SAAAmB,IAAA,EAAG;;MACC,QAAQ,IAAI,CAAC7B,KAAK;QACd,KAAKP,kBAAkB,CAAC0B,WAAW;UAAE;YACjC;YACA,OAAO,IAAI,CAAChB,MAAM,KAAK,CAAC,KACnB,IAAI,CAACG,UAAU,KAAKZ,YAAY,CAACyD,SAAS,IACvC,IAAI,CAAChD,MAAM,KAAK,IAAI,CAACC,SAAS,CAAC,GACjC,IAAI,CAACgD,4BAA4B,EAAE,GACnC,CAAC;;QAEX;QACA,KAAK3D,kBAAkB,CAAC4B,cAAc;UAAE;YACpC,OAAO,IAAI,CAACiB,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC;;QAEvC,KAAK7C,kBAAkB,CAAC8B,UAAU;UAAE;YAChC,OAAO,IAAI,CAACe,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC;;QAEvC,KAAK7C,kBAAkB,CAACwB,YAAY;UAAE;YAClC,CAAAwB,EAAA,OAAI,CAAC3C,MAAM,cAAA2C,EAAA,uBAAAA,EAAA,CAAEC,0CAA0C,CACnD,IAAI,CAACxC,QAAQ,CAChB;YACD,OAAO,CAAC;;QAEZ,KAAKT,kBAAkB,CAACQ,WAAW;UAAE;YACjC;YACA,OAAO,CAAC;;;IAGpB;EAAC;EAAA,OAAAN,aAAA;AAAA;AAGL;;;;;;AAMA,SAAS2D,UAAUA,CAAC1D,UAAuB;EACvC,IAAI2D,GAAG,GAAG,EAAE;EACZ,IAAMC,OAAO,GAAG,IAAI7D,aAAa,CAC7BC,UAAU,EACV,UAACiB,GAAG;IAAA,OAAM0C,GAAG,IAAIhF,aAAa,CAACsC,GAAG,CAAC;EAAA,CAAC,CACvC;EAED,OAAO,SAAS4C,cAAcA,CAC1B5C,GAAW,EACXP,UAAwB;IAExB,IAAIoD,SAAS,GAAG,CAAC;IACjB,IAAI5C,MAAM,GAAG,CAAC;IAEd,OAAO,CAACA,MAAM,GAAGD,GAAG,CAAC8C,OAAO,CAAC,GAAG,EAAE7C,MAAM,CAAC,KAAK,CAAC,EAAE;MAC7CyC,GAAG,IAAI1C,GAAG,CAAC+C,KAAK,CAACF,SAAS,EAAE5C,MAAM,CAAC;MAEnC0C,OAAO,CAAC7C,WAAW,CAACL,UAAU,CAAC;MAE/B,IAAMuD,GAAG,GAAGL,OAAO,CAAC5C,KAAK,CACrBC,GAAG;MACH;MACAC,MAAM,GAAG,CAAC,CACb;MAED,IAAI+C,GAAG,GAAG,CAAC,EAAE;QACTH,SAAS,GAAG5C,MAAM,GAAG0C,OAAO,CAAC3B,GAAG,EAAE;QAClC;;MAGJ6B,SAAS,GAAG5C,MAAM,GAAG+C,GAAG;MACxB;MACA/C,MAAM,GAAG+C,GAAG,KAAK,CAAC,GAAGH,SAAS,GAAG,CAAC,GAAGA,SAAS;;IAGlD,IAAMvD,MAAM,GAAGoD,GAAG,GAAG1C,GAAG,CAAC+C,KAAK,CAACF,SAAS,CAAC;IAEzC;IACAH,GAAG,GAAG,EAAE;IAER,OAAOpD,MAAM;EACjB,CAAC;AACL;AAEA;;;;;;;;;;AAUA,OAAM,SAAU8C,eAAeA,CAC3BrD,UAAuB,EACvBkD,OAAe,EACfgB,OAAe,EACfzB,IAAY;EAEZ,IAAM0B,WAAW,GAAG,CAACjB,OAAO,GAAGpE,YAAY,CAACsF,aAAa,KAAK,CAAC;EAC/D,IAAMC,UAAU,GAAGnB,OAAO,GAAGpE,YAAY,CAACwF,UAAU;EAEpD;EACA,IAAIH,WAAW,KAAK,CAAC,EAAE;IACnB,OAAOE,UAAU,KAAK,CAAC,IAAI5B,IAAI,KAAK4B,UAAU,GAAGH,OAAO,GAAG,CAAC,CAAC;;EAGjE;EACA,IAAIG,UAAU,EAAE;IACZ,IAAMvD,KAAK,GAAG2B,IAAI,GAAG4B,UAAU;IAE/B,OAAOvD,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIqD,WAAW,GAClC,CAAC,CAAC,GACFnE,UAAU,CAACkE,OAAO,GAAGpD,KAAK,CAAC,GAAG,CAAC;;EAGzC;EAEA;EACA,IAAIyD,EAAE,GAAGL,OAAO;EAChB,IAAIM,EAAE,GAAGD,EAAE,GAAGJ,WAAW,GAAG,CAAC;EAE7B,OAAOI,EAAE,IAAIC,EAAE,EAAE;IACb,IAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;IAC3B,IAAME,MAAM,GAAG1E,UAAU,CAACyE,GAAG,CAAC;IAE9B,IAAIC,MAAM,GAAGjC,IAAI,EAAE;MACf8B,EAAE,GAAGE,GAAG,GAAG,CAAC;KACf,MAAM,IAAIC,MAAM,GAAGjC,IAAI,EAAE;MACtB+B,EAAE,GAAGC,GAAG,GAAG,CAAC;KACf,MAAM;MACH,OAAOzE,UAAU,CAACyE,GAAG,GAAGN,WAAW,CAAC;;;EAI5C,OAAO,CAAC,CAAC;AACb;AAEA,IAAMQ,WAAW,GAAGjB,UAAU,CAACnF,cAAc,CAAC;AAC9C,IAAMqG,UAAU,GAAGlB,UAAU,CAAClF,aAAa,CAAC;AAE5C;;;;;;;AAOA,OAAM,SAAUqG,UAAUA,CAAC5D,GAAW,EAA4B;EAAA,IAA1B6D,IAAI,GAAAC,SAAA,CAAAlD,MAAA,QAAAkD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGjF,YAAY,CAACmF,MAAM;EAC9D,OAAON,WAAW,CAAC1D,GAAG,EAAE6D,IAAI,CAAC;AACjC;AAEA;;;;;;AAMA,OAAM,SAAUI,mBAAmBA,CAACjE,GAAW;EAC3C,OAAO0D,WAAW,CAAC1D,GAAG,EAAEnB,YAAY,CAACyD,SAAS,CAAC;AACnD;AAEA;;;;;;AAMA,OAAM,SAAU4B,gBAAgBA,CAAClE,GAAW;EACxC,OAAO0D,WAAW,CAAC1D,GAAG,EAAEnB,YAAY,CAACa,MAAM,CAAC;AAChD;AAEA;;;;;;AAMA,OAAM,SAAUyE,SAASA,CAACnE,GAAW;EACjC,OAAO2D,UAAU,CAAC3D,GAAG,EAAEnB,YAAY,CAACa,MAAM,CAAC;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}